buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def buildnumber = System.getenv("BUILD_NUMBER")
def travisbuildnumber = (System.getenv("TRAVIS_BUILD_NUMBER") ?: -000).toInteger() + 00
version = "${mod_version}.${buildnumber ?: travisbuildnumber}"
group = group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${title}-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
//    maven {
//        // location of a maven mirror for JEI files, as a fallback
//        name = "ModMaven"
//        url = "https://modmaven.k-4u.nl"
//    }
    flatDir {
        dirs 'libs'
    }
}

//println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "snapshot", version: "${project.mcp_version}".toString()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mpalib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mpalib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mpalib', '--all', '--output', file('src/generated/resources/')

            mods {
                mpalib {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft([
            group  : "${project.forgegroup}",
            name   : "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])

//    // compile against the JEI API but do not include it at runtime
//    // currently not actually using any JEI code, just using it as a matter of convienience for testing.
//    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
//
//    // at runtime, use the full JEI jar
//    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // compile against the JEI API but do not include it at runtime
    // currently not actually using any JEI code, just using it as a matter of convienience for testing.
    compileOnly fg.deobf("mezz.jei:jei-1.16.3:${jei_version}:api")

    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.3:${jei_version}")
}

//dependencies {
//    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
//    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
//    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
//    minecraft 'net.minecraftforge:forge:1.16.1-32.0.61'
//
//    // You may put jars on which you depend on in ./libs or you may define them like so..
//    // compile "some.group:artifact:version:classifier"
//    // compile "some.group:artifact:version"
//
//    // Real examples
//    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
//    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
//
//    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
//    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
//
//    // These dependencies get remapped to your current MCP mappings
//    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
//
//    // For more info...
//    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
//    // http://www.gradle.org/docs/current/userguide/dependency_management.html
//
//}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "mpalib",
            "Specification-Vendor": "lehjr",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"lehjr",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//processResources {
//    // This will ensure that this task is redone when the versions change.
//    inputs.property 'version', project.version
//
//    // Replace stuff in mods.toml, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'META-INF/mods.toml'
//
//        // Replace version
//        expand 'version':project.version
//    }
//
//    // Copy everything else except the mods.toml
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'META-INF/mods.toml'
//    }
//}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives devJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
